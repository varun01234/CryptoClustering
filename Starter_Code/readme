<!-- Step 1: Setting Up the Project
Create a GitHub Repository:

Create a new repository named CryptoClustering on GitHub.
Clone the repository to your local machine.
Download Starter Code:

Download the Module 19 Challenge starter code from Starter Code Zip.
Extract the contents into your local CryptoClustering repository.
Initial Commit:

Add all files to the repository.
Commit your changes with a meaningful message like "Initial commit: added starter code".
Step 2: Loading and Preparing Data
Load Data into DataFrame:

Read the provided CSV file (crypto_data.csv) into a Pandas DataFrame.
Data Exploration:

Use describe() to get summary statistics of the data.
Plot histograms or box plots to visualize the distributions of numeric columns.
Step 3: Data Preprocessing
Normalization:
Import StandardScaler from sklearn.preprocessing.
Normalize the numeric data from the CSV file using StandardScaler.
Create a new DataFrame (scaled_data) with the normalized values.
Set the index of this DataFrame to the "coin id" column from the original DataFrame.
Step 4: Finding the Optimal Number of Clusters (k)
Elbow Method with Original Data:
Create a list k_values from 1 to 11.
Initialize an empty list inertia_values to store the inertia for each k.
Loop through k_values, fit a KMeans model for each k, compute inertia, and store it in inertia_values.
Plot an elbow curve using matplotlib.pyplot to visualize k_values against inertia_values.
Identify the elbow point to determine the optimal k.
Step 5: Clustering with K-Means using Original Data
Clustering:

Initialize a KMeans model with the optimal k value determined from the elbow method.
Fit the KMeans model using scaled_data.
Predict the clusters and assign the cluster labels back to the original DataFrame (crypto_data).
Create a copy of crypto_data and add a new column cluster with the predicted clusters.
Visualization:

Use hvPlot to create a scatter plot:
Set x as "price change percentage 24h" and y as "price change percentage 7d".
Color the points by the cluster column.
Use hover_cols to display the "coin id" to identify each cryptocurrency.
Step 6: Principal Component Analysis (PCA)
PCA and Explained Variance:
Import PCA from sklearn.decomposition.
Fit PCA on scaled_data to reduce features to three principal components.
Retrieve and print the explained variance ratio to understand how much information each principal component retains.
Step 7: Finding the Optimal Number of Clusters (k) with PCA Data
Elbow Method with PCA Data:
Repeat the elbow method steps using the three principal components obtained from PCA.
Plot the elbow curve to find the optimal k value for clustering using PCA.
Step 8: Clustering with K-Means using PCA Data
Clustering with PCA Data:

Initialize a new KMeans model with the optimal k value from PCA analysis.
Fit the KMeans model on the PCA-transformed data.
Predict clusters and add a new column cluster_pca to the PCA DataFrame (pca_data).
Visualization of PCA Results:

Use hvPlot to create a scatter plot:
Set x as "PC1" and y as "PC2".
Color points by the cluster_pca labels.
Use hover_cols to show the "coin id" for each data point.
Step 9: Visualizing and Comparing Results
Composite Plots:

Use hvPlot to create composite plots comparing:
Elbow curves are not needed they were already drawn previously.
Scatter plots of cryptocurrency clusters from both original data and PCA data.
Impact of Using Fewer Features:

Answer the question: "What is the impact of using fewer features to cluster the data using K-Means?" based on visual analysis. -->